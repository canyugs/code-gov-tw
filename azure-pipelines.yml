trigger:
  branches:
    include:
      - main
    exclude:
      - refs/heads/release
      - refs/heads/pre-release
pr:
  - main

stages:
  - stage: checkBeforeBuild
    pool:
      name: CI
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: Linter
        displayName: Lint Project
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run lint
      - job: Formatting
        displayName: Formatting Check
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run fmt.check
  - stage: build
    pool:
      name: CI
    condition: eq(variables['Build.Reason'], 'PullRequest')
    dependsOn: checkBeforeBuild
    jobs:
      - job: Build
        displayName: Build
        steps:
          - task: NodeTool@0
            inputs:
              versionSource: "spec"
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run build
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "./dist"
              artifact: "build"
              publishLocation: "pipeline"
  - stage: checkAfterBuild
    pool:
      name: CI
    condition: eq(variables['Build.Reason'], 'PullRequest')
    dependsOn: build
    jobs:
      - job: accessibility
        displayName: Accessibility Check
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "build"
              targetPath: "./dist"
          - task: CmdLine@2
            displayName: Accessibility Check
            inputs:
              script: |
                npm install -g accessibility-checker
                npm run a11y.check
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "./accessibility-check-results"
              artifact: "accessibility-check-results"
              publishLocation: "pipeline"
      - job: lighthouseci
        displayName: Lighthouse Check
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "build"
              targetPath: "./dist"
          - task: CmdLine@2
            displayName: Lighthouse CI
            inputs:
              script: |
                npm install -g @lhci/cli@0.13.x
                lhci autorun
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "./.lighthouseci"
              artifact: "lighthouse-results"
              publishLocation: "pipeline"
  - stage: pre_release
    pool:
      name: CD
    displayName: Pre-release
    dependsOn: []
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
      - job: build
        displayName: Build
        steps:
          - checkout: self
            persistCredentials: true
            clean: true
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run build
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "./dist"
              artifact: "pre-release-build"
              publishLocation: "pipeline"
          - task: CmdLine@2
            displayName: "commit changes"
            inputs:
              script: |
                git config --global user.email "can_yu@mutix.co"
                git config --global user.name "AzurePipeline"
                git checkout -b pre-release
                git add -f ./dist
                git commit -m "[skip ci] Pre-release build"
                git push -u -f origin pre-release
